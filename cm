#!/bin/sh

#PREF="/home/jailuser/www"
PREF="$HOME/www"

#UID=`cat /etc/passwd | awk -F ':' '$1~/^jailuser$/ { print $3 }'`
#GID=`cat /etc/passwd | awk -F ':' '$1~/^jailuser$/ { print $4 }'`
UNAME=`hostname | sed 's/\.[a-z]*$//;s/_/\./g;s/-/\./g'`
UNAMECH=`echo $UNAME | sed 's/\.local//;s/_/-/g;s/\./-/g'`
GIT=`which git`
GITU='git@172.16.1.123'
IP=`ifconfig | grep -F "$IPPREF" | sed 's/^.*inet addr://;s/[^0-9.].*//' | grep -vF '127.0.0.1' | sed '/^$/d'`
IPPREF='192.168.3.'
#IPMSK=`echo "$IPPREF" | sed 's/\./\\\./g'`
IPMSK=`echo "$IP" | sed 's/\./\\\./g'`
LPREF=`dirname $0`
#LPREF='/sbin'
DNSKEY='/usr/local/sbin/user-updater.key'
NGCONF="
server
{
    listen 80;
    server_name %%%VHOST%%%;
    access_log /home/%%%UNAME%%%/www/log/%%%VDIR%%%-access.log;
    error_log /home/%%%UNAME%%%/www/log/%%%VDIR%%%-error.log;

    allow 127.0.0.0/24;
    allow 172.16.1.0/24;
    allow 172.16.16.0/24;
    allow 192.168.3.0/24;
    deny all;
  
    root /home/%%%UNAME%%%/www/%%%VDIR%%%/htdocs;
  
    index index.php index.html index.htm;
  
    # use fastcgi for all php files
    location ~ \.php$
    {
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param       SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
        fastcgi_ignore_client_abort     off;
    }
  
    # Deny access to apache .htaccess files
    location ~ /\.ht
    {
        deny all;
    }
}
"

APCONF="
<VirtualHost *:80>
    ServerAdmin admins@xsolla.com
    DocumentRoot "/home/%%%UNAME%%%/www/%%%VDIR%%%/htdocs"
    ServerName %%%VHOST%%%
    ErrorLog "/home/%%%UNAME%%%/www/log/%%%VDIR%%%-error.log"
</VirtualHost>
"

# Other service variables

DIV='=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='
LOGLEVEL='debug'
LPREF='date +%Y.%m.%d-%H:%M:%S'
LCOLOR=1

# Logging function
l() {
    [ -z "$LPREF" ] && LPREF='date +%Y.%m.%d-%H:%M:%S'
    if [ -z "$LCOLOR" ]; then
        [ -n "$(which tput)" ] && LCOLOR=1 || LCOLOR=0
    fi
    if [ -n "$2" ]; then
        case "$1" in
            d)
                if [ "$LOGLEVEL" = "debug" ]; then
                    [ "$LCOLOR" = "1" ] && tput setaf 5
                    echo `$LPREF`" DEBUG:   $2"    
                    [ "$LCOLOR" = "1" ] && tput sgr0
                fi
            ;;
            i)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ]; then
                    [ "$LCOLOR" = "1" ] && tput setaf 2
                    echo `$LPREF`" INFO:    $2"
                    [ "$LCOLOR" = "1" ] && tput sgr0
                fi
            ;;
            w)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ] || [ "$LOGLEVEL" = "warning" ]; then
                    [ "$LCOLOR" = "1" ] && tput setaf 3
                    echo `$LPREF`" WARNING: $2"
                    [ "$LCOLOR" = "1" ] && tput sgr0
                fi
            ;;
            e)
                [ "$LCOLOR" = "1" ] && tput setaf 1
                echo `$LPREF`" ERROR:   $2"
                [ "$LCOLOR" = "1" ] && tput sgr0
            ;;
            f)
                [ "$LCOLOR" = "1" ] && tput setaf 1
                echo `$LPREF`" FATAL:   $2"
                [ "$LCOLOR" = "1" ] && tput sgr0
            ;;
            fe) 
                [ "$LCOLOR" = "1" ] && tput setaf 1
                echo `$LPREF`" FATAL:   $2"
                [ "$LCOLOR" = "1" ] && tput setaf 2
                echo `$LPREF`" INFO:    All next operations will be cancelled..."
                [ "$LCOLOR" = "1" ] && tput sgr0
                [ -n "$3" ] && exit $3 || exit 1 
            ;;
        esac
    else
        case "$1" in
             fe) 
                [ "$LCOLOR" = "1" ] && tput setaf 1
                echo `$LPREF`" FATAL:   Not enough parameters." 
                [ "$LCOLOR" = "1" ] && tput setaf 2
                echo `$LPREF`" INFO:    All next operations will be cancelled..."
                [ "$LCOLOR" = "1" ] && tput sgr0
                exit 1 
            ;;
        esac
    fi
}

# Simple dialog
dlg() {
    ch="-"
    [ -n "$2" ] && def="$2" || def='y'
    while [ -z "$(echo "$ch" | sed 's/^$/'"$def"'/' | egrep -i '^[ynYN]?$' )" ]; do
        case "$def" in
            y|Y)
                read -p "$1 [Y/n]: " ch
            ;;
            n|N)
                read -p "$1 [N/y]: " ch
            ;;
        esac
    done
    [ -z "$ch" ] && ch="$def"
    case "$ch" in
        Y|y)
            return 0
        ;;
        N|n)
            return 1
        ;;
    esac
}

# Get repository
# 1 - git url, 2 - relative path in www dir
getrep() {
    if [ -n "$1" ]; then
        cd $PREF
        rep=`echo "$1" | sed 's/\.git$//'`
        [ -n "$2" ] && repdir="$2" || repdir=`echo "$1" | sed 's#^.*/##g'`
       echo $repdir 
        if [ -n "$( echo "$repdir" | sed 's/[\./a-zA-Z0-9-]//g' )" ]; then
            l fe "The URL prefix must contain only this characters: a-z A-Z, digits, dots and \"-\"" 2
        fi

        if [ -d "$2" ]; then
            l e "Directory $2 is already exists!"
            l i "Repository $1 cant be cloned here..."
            return 1
        else
            l i "Trying to clone repository $GITU:$rep.git to the $repdir..."
            git clone "$GITU:$rep.git" "$repdir"
            if [ -d "$repdir/.git" ]; then
                l i "Repository was cloned successfully..."
                return 0
            else
                l fe "Can\'t clone repository $rep..." 3
            fi
        fi
    else
        l fe 'Failed to clone repository, not enough parameters...'
    fi
}

# Add/remove DNS record
# domman <add|rm> <domain name without .user>
domman() {
    if [ "$1" = "add" ]; then
        if [ -n "$(nslookup  $2-$UNAMECH.user | sed '1,3d;/'"$IPMSK"'/!d;s/^.*: //' )" ]; then
            l w "This domain name is already exists"
            #if `dlg "Do you want to replace it?"`; then
                #domman rm "$2-$UNAMECH"
                #domman add "$2-$UNAMECH"
            #fi
            return 1
        else
            if `echo "server ns2.local|zone user|update add $2-$UNAMECH.user 600 A $IP|send" | tr '|' '\n' | nsupdate -k "$DNSKEY"`; then
                l i "Domain name is added successfully"
                return 0
            else
                l w "Can not add domain name"
                return 1
            fi
            
        fi
    elif [ "$1" = "rm" ]; then
        DNSIP=`nslookup $2-$UNAMECH.user | sed '/^$/d' | tail -n 1 | awk '$1~/^Address:$/ { print $2 }'`
        if [ -n "$DNSIP" ]; then
            if `echo "server ns2.local|zone user|update delete $2-$UNAMECH.user|send" | tr '|' '\n' | nsupdate -k "$DNSKEY"`; then
                l i "Domain name is removed successfully"
                return 0
            else
                l w "Can not remove domain name"
            fi
        else
            l i "This domain name ($2-$UNAMECH.user) is not exists"
        fi
    #elif [ "$1" = "ls" ]; then
        
    fi
}

# Add virtual host
# 1 - webpref, 2 - relative path in www dir
avh() {
    [ -n "$1" ] || l fe
    [ -n "$2" ] || l fe
	cfggen() {
		CFGPREF="/etc/$SRVTYPE/sites"    
		VHNAME="$1-$UNAMECH.user"
		CFGNAME="/etc/$SRVTYPE/sites-available/$VHNAME.conf"
		SMLNAME="/etc/$SRVTYPE/sites-enabled/$VHNAME.conf"
		LGDNAME="/home/$UNAME/www/$2/log"
		ACLNAME="$LGDNAME/$SRVTYPE-access.log"
		ERRNAME="$LGDNAME/$SRVTYPE-error.log"
		case "$SRVTYPE" in 
			"nginx")
				CFGCONT=`echo "$NGCONF" | sed 's#%%%VHOST%%%#'"$VHNAME"'#g;s#%%%UNAME%%%#'"$UNAME"'#g;s#%%%VDIR%%%#'"$2"'#g'`
			;;
			"apache2")
				CFGCONT=`echo "$APCONF" | sed 's#%%%VHOST%%%#'"$VHNAME"'#g;s#%%%UNAME%%%#'"$UNAME"'#g;s#%%%VDIR%%%#'"$2"'#g'`
			;;
		esac
		l i "Adding virtual host for $VHNAME..."
		cfgwrite() {
			[ -f "$SMLNAME" ] && rm "$SMLNAME"
			if `echo "$CFGCONT" > "$CFGNAME"`; then
				l i "$SRVTYPE config for $VHNAME successfully saved."
				ln -s "$CFGNAME" "$SMLNAME"
				if `sudo $SRVTYPE -t`; then
				echo $SRVTYPE OK
				else
					l fe $SRVTYPE config file syntax error! 9
				fi
			else
				l fe "Fail to write config to $CFGCONT."
			fi
		}
		[ -d "$LGDNAME" ] || mkdir -p "$LGDNAME"
		touch "$ACLNAME"
		touch "$ERRNAME"

		if [ -f "$CFGNAME" ]; then
			l w "Configuration file $CFGNAME is already exists."
			if `dlg "Do you want to replace it?"`; then
				[ -f "$SMLNAME" ] && rm "$SMLNAME"
			cfgwrite
			fi
		else
			cfgwrite
		fi
	}
	SRVTYPE="apache2"
	cfggen "$1" "$2"

	SRVTYPE="nginx"
	cfggen "$1" "$2"
	wr
}

# Add all
# 1 - webpref, 2 - git url, 3 - relative path to the working copy
add() {
    [ -n "$1" ] || l fe "Web prefix should not be empty. See $0 help add for details."
    [ -n "$2" ] || l fe "Git url should not be empty. See $0 help add for details."
    #[ -n "$3" ] || l fe "Relative path to the working copy  should not be empty. See $0 help add for details."
    [ -n "$3" ] && rel="$3" || rel="$1"
    echo getrep "$2" "$3"
    getrep "$2" "$rel"
    if `dlg "Do you want to add virtual host?"`; then
        avh "$1" "$rel"
    fi
}

# Remove all
# 1 - virtual host
rmall() {
    l i "Removing virtual host for $1..."
    if [ -n "$1" ]; then
        LST=`egrep "^[\t ]*server_name" /etc/nginx/sites-available/*.conf | sed 's/^[\t ]*server_name //;s/;.*$//'`
        if [ -n "$LST" ]; then
            for l in `echo $LST`; do
#                CONFNAME=`echo "$l" | cut -d ":" -f 1`
		CONFNAME="$(echo /etc/nginx/sites-available/"$l".conf)"
                SLNNAME=`echo "$CONFNAME" | sed 's/sites-available/sites-enabled/g'`
                DMNNAME=`echo "$1" | cut -d ":" -f 3`
                WCPATH=`awk '$1~/^root$/ { gsub(/\/htdocs;/,""); gsub(/;/,""); print $2 }' $CONFNAME`
				rmconf() {
					if `dlg "Do you want to remove config file $CONFNAME?"`; then
						if [ -f "$SLNNAME" ]; then
							l i "Removing symlink file $SLNNAME"
							if rm -v "$SLNNAME" ; then
								echo > /dev/null
							else
								l fe "Can't remove file $SLNNAME" 11
							fi
						fi

						l i "Removing config file $CONFNAME"
						if rm -v "$CONFNAME"; then
							echo > /dev/null
						else
							l fe "Can't remove file $CONFNAME" 11
						fi
					fi
				}
				rmconf
				CONFNAME=`echo "$CONFNAME" | sed 's/nginx/apache2/g'`
				SLNNAME=`echo "$SLNNAME" | sed 's/nginx/apache2/g'`
				rmconf	

                if `dlg "Do you want to remove domain name $DMNNAME?"`; then
                    domman rm "$DMNNAME"
                fi

                if `dlg "Do you want to remove working copy $WCPATH?"`; then
                    rm -rv "$WCPATH"
                fi
            done

            #if [ -n "$2" ]; then
                #echo "Removing DNS record for $1"
                #domman rm "$1"
                #ar
            #fi
        fi
    else
        l f "Not enough parameters"
        echo "Usage: $0 rmall <hostname>"
        echo "Example: $0 rmall test-domain-v-azelin.user"
        echo
        exit 1
    fi
}

# List of virtual hosts
lvh() {
    grep -irn 'server_name' /etc/nginx/sites-enabled/*.conf | awk '{gsub(/;/, "", $3); print $3}'
}

# Apache and Nginx restart
wr() {
    sudo /etc/init.d/apache2 restart
    sudo /etc/init.d/nginx restart
}

switch() {
	if [ -n "$1" ]; then	
	case "$1" in
			apache2)
			pgrep nginx && sudo service nginx stop
			sudo update-rc.d -f nginx remove
			sudo update-rc.d apache2 defaults
			sudo service apache2 start && pgrep apache2 && echo Apache2 is serving you now.
			;;

			nginx)
			pgrep apache2 && sudo service apache2 stop
			sudo update-rc.d -f apache2 remove
			sudo update-rc.d nginx defaults
			sudo service nginx start && pgrep nginx && echo Nginx is serving you now.
			;;

			*)
				echo "Example: cm switch apache2"
			;;

		esac
	else
		echo "Example: cm switch apache2"
	fi
}

# Manual
manual() {
    LIST="gr ad rd add rmall avh lvh switch"

    if [ -n "$1" ]; then
        case "$1" in
             gr)
                echo "Usage:"
                echo "    To get existing repository: $0 gr <repository path without .git and servername> <web url prefix>"
                echo "        Example: $0 gb frontend/secure-xsolla-com secure"
                echo "        Result domain name: http://secure-v-azelin.user"
                echo "        Configuration file for nginx and DNS record will be created after cloning"
                echo 
            ;;
            

            ad)
                echo "    To add domain record: $0 ad <domain name without .user>"
                echo "        Example: $0 ad liveteam"
                echo "        The domain livesteam-a-azelin.user will be linked to IP address of this jail"
                echo 
            ;;

            rd)
                echo "    To remove domain record: $0 rd <domain name without .user>"
                echo "        Example: $0 rd liveteam_v.azelin"
                echo "        The domain name will be removed"
                echo 
            ;;

            add)
                echo "    To checkout rep, create configs and update dns records: $0 add <webprefix> <git repository url without .git and servername> <path to the working copy>"
                echo "        Example: $0 add secure \"frontend/seucre\" secure.xsolla.com"
                echo "        You will get the code from repository, then nginx config and dns record will be created"
                echo 

            ;;
           
            avh)
                echo "    To add new virtual hosts: $0 avh <webprefix> <relavive path in www dir>"
                echo "        Example: $0 lvh"
                echo "        You will get list of your virtual hosts"
                echo 

            ;;


            lvh)
                echo "    To getting list of your virtual hosts: $0 lvh"
                echo "        Example: $0 lvh"
                echo "        You will get list of your virtual hosts"
                echo 

            ;;

            rmall)
                echo "    To remove anything: $0 rmall <name of virtual host>"
                echo "        Example: $0 rmall secure-v-azelin.user"
                echo "        BE CAREFULL!!! Nginx config, DNS record, and working copy can be removed at all!"
                echo 
            ;;

            switch)
                echo "    To switch webserver: $0 switch <webserver name>"
                echo "        Example: $0 switch Apache2"
                echo "        apache2 / nginx
                echo 
            ;;

            all)
                for h in $LIST; do
                    manual "$h"
                done
            ;;

            *)
                echo "Wrong parameter"
                echo "    To get help you should type: $0 help <`echo "$LIST all" | sed 's/ / | /g'`>"
                echo
            ;;

        esac
    else
        echo "Empty help parameter"
        echo "    To get help you should type: $0 help <`echo "$LIST all" | sed 's/ / | /g'`>"
        echo
    fi

}

# Check other requirements
chk() {
    [ `whoami` = "root" ] && l fe 'Do not start it if you are root!'
    if ! [ -d "$PREF" ]; then
        mkdir -p /home/$UNAME/www
        chown "$UNAME:www-data" /home/$UNAME/www
    fi
    [ -n "$(dpkg -l | awk '$2~/^git$/')" ] || l fe "Git is not installed!"
}


chk

#if [ -n "$(whoami | egrep '^jailuser$')" ]; then
        [ -d "$PREF" ] || mkdir -p "$PREF"
        cd "$PREF"

        case "$1" in
            gr)
                gr "$2" "$3"
            ;;
            
            ad)
                [ -n "$2" ] && domman add $2 || manual ad
            ;;

            rd)
                [ -n "$2" ] && domman rm $2 || manual rd
            ;;

            lvh)
                lvh && echo
            ;;
            
            rmall)
                rmall "$2"
            ;;

            avh)
                avh "$2" "$3"
            ;;

            add)
                add "$2" "$3" "$4" 
            ;;

            switch)
                switch "$2"
            ;;

            help)
                manual "$2"
            ;;

            *)
                manual
            ;;

        esac

#else
    #echo "You must be jailuser to run this"
    #echo
    #exit 2
#fi


exit 0
